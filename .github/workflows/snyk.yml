name: Example workflow for Python using Snyk
on: push
jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
      - name: install node js
        uses: actions/setup-node@v1
        with:
          node-version: 12.1
      - name: instal npm dependencies
        run: npm i -g snyk-delta
      - name: Install Snyk
        continue-on-error: true 
        uses: snyk/actions/setup@master
      - name: Second test
        continue-on-error: true 
        run: snyk test --json --print-deps | snyk-delta
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Third test
        continue-on-error: true 
        uses: snyk/actions/setup@master
      - name: run snyk test code
        run: snyk code test --sarif > snyk_sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk_sarif
      - name: One more test
        run: docker build . --file Dockerfile --tag my-vuln-image:latest
      - name: Snyk Docker
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: my-vuln-image:latest
          command: monitor
        
        
